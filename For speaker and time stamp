#Cell 1: Install Everything (Run once)
# Run this cell first - it installs what we need
!pip install git+https://github.com/m-bain/whisperx.git
print("✅ Installation complete! Move to the next cell.")


#Cell 2: Upload Your Audio File
# Click the button below to upload your audio file (MP3, WAV, etc.)
from google.colab import files
uploaded = files.upload()

# Get the filename
audio_filename = list(uploaded.keys())[0]
print(f"✅ Uploaded: {audio_filename}")
print("Now paste your Hugging Face token in the next cell and run it!")


#Cell 3: Transcribe with Multiple Formats

# PASTE YOUR TOKEN BELOW (get free token at https://huggingface.co/settings/tokens)
YOUR_TOKEN = "paste_your_token_here"  # ← CHANGE THIS

import whisperx
import json
import csv
print("🎙️ Starting transcription... this may take a few minutes...")

# Load and transcribe
model = whisperx.load_model("base", "cuda", language="en")
audio = whisperx.load_audio(audio_filename)
result = model.transcribe(audio, batch_size=16)

# Add word-level timestamps
model_a, metadata = whisperx.load_align_model(language_code="en", device="cuda")
result = whisperx.align(result["segments"], model_a, metadata, audio, "cuda")

# Add speaker labels
diarize_model = whisperx.DiarizationPipeline(use_auth_token=YOUR_TOKEN, device="cuda")
diarize_segments = diarize_model(audio_filename)
result = whisperx.assign_word_speakers(diarize_segments, result)

# Get base filename without extension
base_name = audio_filename.rsplit('.', 1)[0]

# 1. Save as TXT
with open(f"{base_name}.txt", "w", encoding="utf-8") as f:
    for segment in result["segments"]:
        speaker = segment.get('speaker', 'Unknown')
        f.write(f"[{segment['start']:.2f}s - {segment['end']:.2f}s] {speaker}: {segment['text']}\n")
print(f"✅ Saved: {base_name}.txt")

# 2. Save as SRT (subtitles)
with open(f"{base_name}.srt", "w", encoding="utf-8") as f:
    for i, segment in enumerate(result["segments"], 1):
        start = f"{int(segment['start']//3600):02d}:{int(segment['start']%3600//60):02d}:{segment['start']%60:06.3f}".replace('.', ',')
        end = f"{int(segment['end']//3600):02d}:{int(segment['end']%3600//60):02d}:{segment['end']%60:06.3f}".replace('.', ',')
        speaker = segment.get('speaker', 'Unknown')
        f.write(f"{i}\n{start} --> {end}\n{speaker}: {segment['text'].strip()}\n\n")
print(f"✅ Saved: {base_name}.srt")

# 3. Save as VTT (web subtitles)
with open(f"{base_name}.vtt", "w", encoding="utf-8") as f:
    f.write("WEBVTT\n\n")
    for segment in result["segments"]:
        start = f"{int(segment['start']//3600):02d}:{int(segment['start']%3600//60):02d}:{segment['start']%60:06.3f}"
        end = f"{int(segment['end']//3600):02d}:{int(segment['end']%3600//60):02d}:{segment['end']%60:06.3f}"
        speaker = segment.get('speaker', 'Unknown')
        f.write(f"{start} --> {end}\n{speaker}: {segment['text'].strip()}\n\n")
print(f"✅ Saved: {base_name}.vtt")

# 4. Save as TSV
with open(f"{base_name}.tsv", "w", encoding="utf-8", newline='') as f:
    writer = csv.writer(f, delimiter='\t')
    writer.writerow(['start', 'end', 'speaker', 'text'])
    for segment in result["segments"]:
        writer.writerow([
            f"{segment['start']:.3f}",
            f"{segment['end']:.3f}",
            segment.get('speaker', 'Unknown'),
            segment['text'].strip()
        ])
print(f"✅ Saved: {base_name}.tsv")

# 5. Save as JSON
with open(f"{base_name}.json", "w", encoding="utf-8") as f:
    json.dump(result, f, ensure_ascii=False, indent=2)
print(f"✅ Saved: {base_name}.json")

# 6. Save simple transcript without timestamps
with open(f"{base_name}_simple.txt", "w", encoding="utf-8") as f:
    current_speaker = None
    for segment in result["segments"]:
        speaker = segment.get('speaker', 'Unknown')
        if speaker != current_speaker:
            f.write(f"\n{speaker}:\n")
            current_speaker = speaker
        f.write(f"{segment['text'].strip()} ")
print(f"✅ Saved: {base_name}_simple.txt")

print("\n🎉 ALL DONE! Created 6 different formats:")
print(f"  📄 {base_name}.txt - Full transcript with timestamps")
print(f"  📄 {base_name}_simple.txt - Clean transcript")
print(f"  🎬 {base_name}.srt - Subtitle file")
print(f"  🌐 {base_name}.vtt - Web subtitle file")
print(f"  📊 {base_name}.tsv - Spreadsheet format")
print(f"  💾 {base_name}.json - Data format")
print("\n📥 Download from the files panel on the left →")

# Also display preview
print("\n" + "="*60)
print("📝 PREVIEW OF TRANSCRIPT")
print("="*60 + "\n")
for i, segment in enumerate(result["segments"][:10]):  # Show first 10 segments
    speaker = segment.get('speaker', 'Unknown')
    time = f"{segment['start']:.1f}s"
    print(f"[{time}] {speaker}: {segment['text']}")
if len(result["segments"]) > 10:
    print("\n... (see files for complete transcript)")
